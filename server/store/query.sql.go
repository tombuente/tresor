// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package store

import (
	"context"
)

const createCodeSnippet = `-- name: CreateCodeSnippet :one
INSERT INTO code_snippets (
    content, language_id
) VALUES (
    ?, ?
)
RETURNING id, content, language_id
`

type CreateCodeSnippetParams struct {
	Content    string
	LanguageID int64
}

func (q *Queries) CreateCodeSnippet(ctx context.Context, arg CreateCodeSnippetParams) (CodeSnippet, error) {
	row := q.db.QueryRowContext(ctx, createCodeSnippet, arg.Content, arg.LanguageID)
	var i CodeSnippet
	err := row.Scan(&i.ID, &i.Content, &i.LanguageID)
	return i, err
}

const getCodeLanguage = `-- name: GetCodeLanguage :one
SELECT id, name FROM code_languages
WHERE id = ?
`

func (q *Queries) GetCodeLanguage(ctx context.Context, id int64) (CodeLanguage, error) {
	row := q.db.QueryRowContext(ctx, getCodeLanguage, id)
	var i CodeLanguage
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCodeLanguageByName = `-- name: GetCodeLanguageByName :one
SELECT id, name FROM code_languages
WHERE name = ?
`

func (q *Queries) GetCodeLanguageByName(ctx context.Context, name string) (CodeLanguage, error) {
	row := q.db.QueryRowContext(ctx, getCodeLanguageByName, name)
	var i CodeLanguage
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCodeSnippet = `-- name: GetCodeSnippet :one
SELECT id, content, language_id
FROM code_snippets
WHERE id = ?
`

func (q *Queries) GetCodeSnippet(ctx context.Context, id int64) (CodeSnippet, error) {
	row := q.db.QueryRowContext(ctx, getCodeSnippet, id)
	var i CodeSnippet
	err := row.Scan(&i.ID, &i.Content, &i.LanguageID)
	return i, err
}

const getCodeSnippetJoinLanguage = `-- name: GetCodeSnippetJoinLanguage :one
SELECT code_snippets.id, code_snippets.content, code_languages.id AS langauge_id, code_languages.name AS language_name
FROM code_snippets
JOIN code_languages
ON code_snippets.language_id = code_languages.id
WHERE code_snippets.id = ?
`

type GetCodeSnippetJoinLanguageRow struct {
	ID           int64
	Content      string
	LangaugeID   int64
	LanguageName string
}

func (q *Queries) GetCodeSnippetJoinLanguage(ctx context.Context, id int64) (GetCodeSnippetJoinLanguageRow, error) {
	row := q.db.QueryRowContext(ctx, getCodeSnippetJoinLanguage, id)
	var i GetCodeSnippetJoinLanguageRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.LangaugeID,
		&i.LanguageName,
	)
	return i, err
}
